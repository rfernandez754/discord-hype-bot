""" Module for testing fishing """
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from fishing_util import FishingUtil

RARITY_ATTEMPTS = 100000
RARITY_ORDER = {
        'Common': 0,
        'Uncommon': 1,
        'Rare': 2,
        'Very Rare': 3,
        'Legendary': 4,
        'Mythic': 5,
        'Godly' : 6,
        'Joke' : 7
}

def test_rarity(fishing_level, rod_level):
    """ Function for testing the rarity of fishes
    to make sure they appear an expected amount of times """
    fishing = FishingUtil(fishing_level, rod_level)
    species_map = {}

    # Simulate fishing RARITY_ATTEMPTS times and record species names and rarities
    for _ in range(RARITY_ATTEMPTS):
        _, _, species, _, rarity, _ = fishing.catch_fish()
        if species in species_map:
            species_map[species]['count'] += 1
        else:
            # Initialize species map with count and rarity
            species_map[species] = {
                'count': 1,
                'rarity': rarity
            }

    # Calculate occurrence ratio for each species
    for species, data in species_map.items():
        data['ratio'] = data['count'] / RARITY_ATTEMPTS

    # Sort species by rarity (using predefined rarity order)
    sorted_species = sorted(species_map.items(), key=lambda x: RARITY_ORDER[x[1]['rarity']])

    # Print sorted species occurrence ratio by rarity
    print(f"Species occurrence ratio after {RARITY_ATTEMPTS} fishing attempts (sorted by rarity) "
          f"with Fishing Lvl {fishing_level} and Rod Lvl {rod_level}:")
    for species, data in sorted_species:
        print(f"{species} ({data['rarity']}): {data['ratio']:.4%}")


def main() -> None:
    """ main method """
    test_rarity(1,1)
    test_rarity(5,2)

if __name__ == '__main__':
    main()
